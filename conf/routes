# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# Home/basic pages
GET     /                               controllers.Application.index
GET     /test                           controllers.Application.test
POST    /test                           controllers.Application.test
GET     /home                           controllers.Application.home
GET     /search                         controllers.Application.search
GET     /about                          controllers.Application.about
GET     /terms                          controllers.Application.terms
GET     /policy                         controllers.Application.policy

# Authentication
GET     /auth/google                                    controllers.authentication.Google.login(action: String = "login", path: String = "")
GET     /auth/google/redirect*path                     controllers.authentication.Google.login(action: String = "login", path: String)
GET     /auth/google/merge                              controllers.authentication.Google.login(action: String = "merge", path: String = "")
GET     /auth/google/callback/:action                   controllers.authentication.Google.callback(action: String, path: String = "")
GET     /auth/google/callback/:action/redirect*path    controllers.authentication.Google.callback(action: String, path: String)
GET     /auth/cas                                       controllers.authentication.Cas.login(action: String = "login", path: String = "")
GET     /auth/cas/redirect*path                        controllers.authentication.Cas.login(action: String = "login", path: String)
GET     /auth/cas/merge                                 controllers.authentication.Cas.login(action: String = "merge", path: String = "")
GET     /auth/cas/callback/:action                      controllers.authentication.Cas.callback(action: String, path: String = "")
GET     /auth/cas/callback/:action/redirect*path       controllers.authentication.Cas.callback(action: String, path: String)
POST    /auth/password                                  controllers.authentication.Password.login(action: String = "login", path: String = "")
POST    /auth/password/redirect*path                   controllers.authentication.Password.login(action: String = "login", path: String)
POST    /auth/password/merge                            controllers.authentication.Password.login(action: String = "merge", path: String = "")
POST    /auth/createAccount                             controllers.authentication.Password.createAccount(path: String = "")
POST    /auth/createAccount/redirect*path              controllers.authentication.Password.createAccount(path: String)
GET     /auth/logout                                    controllers.authentication.Authentication.logout

# Course pages
GET     /course                                         controllers.Courses.list
GET     /course/create                                  controllers.Courses.createPage
POST    /course/create                                  controllers.Courses.create
GET     /course/:id                                     controllers.Courses.view(id: Long)
POST    /coures/:id                                     controllers.Courses.edit(id: Long)
GET     /course/:id/config                              controllers.Courses.ltiConfiguration(id: Long)
POST    /course/:id/ltiAuth                             controllers.Courses.ltiAuth(id: Long)
GET     /course/:id/keyAuth                             controllers.Courses.keyAuth(id: Long)
POST    /course/:id/addContent                          controllers.Courses.addContent(id: Long)
POST    /course/:id/announce                            controllers.Courses.addAnnouncement(id: Long)
GET     /course/:id/request                             controllers.Courses.courseRequestPage(id: Long)
POST    /course/:id/request                             controllers.Courses.submitCourseRequest(id: Long)
GET     /course/:id/request/manage                      controllers.Courses.approvePage(id: Long)
GET     /course/:id/request/:requestId/approve          controllers.Courses.approveRequest(id: Long, requestId: Long)
GET     /course/:id/request/:requestId/deny             controllers.Courses.denyRequest(id: Long, requestId: Long)
GET     /course/:courseId/content/:id                   controllers.CourseContent.viewInCourse(id: Long, courseId: Long)
POST    /course/:courseId/content/:id/lti               controllers.CourseContent.viewLms(id: Long, courseId: Long)
GET     /course/:courseId/content/:id/stats             controllers.CourseContent.statsInCourse(id: Long, courseId: Long)
GET     /course/:courseId/content/:id/stats/download    controllers.CourseContent.downloadStatsInCourse(id: Long, courseId: Long)
GET     /course/:courseId/content/:id/stats/clear       controllers.CourseContent.clearStatsInCourse(id: Long, courseId: Long)
GET     /course/:courseId/content/:id/remove            controllers.CourseContent.removeFromCourse(id: Long, courseId: Long)
POST    /course/:courseId/content/:id/settings          controllers.ContentEditing.setCourseSettings(id: Long, courseId: Long)

# Content pages
GET     /content                        controllers.ContentController.public
GET     /content/mine                   controllers.ContentController.mine
GET     /content/create/:page           controllers.ContentController.createPage(page: String)
POST    /content/create/url             controllers.ContentController.createFromUrl
POST    /content/create/batch           controllers.ContentController.createFromUrlBatch
POST    /content/create/file            controllers.ContentController.createFromFile
POST    /content/create/resource        controllers.ContentController.createFromResource
POST    /content/create/playlist        controllers.ContentController.createPlaylist
POST    /content/create/questions       controllers.ContentController.createQuestionSet
GET     /content/:id                    controllers.ContentController.view(id: Long)
GET     /content/:id/stats              controllers.ContentController.stats(id: Long)
GET     /content/:id/stats/download     controllers.ContentController.downloadStats(id: Long)
GET     /content/:id/stats/clear        controllers.ContentController.clearStats(id: Long)
GET     /content/:id/json               controllers.ContentController.getAsJson(id: Long)
GET     /content/:id/delete             controllers.ContentController.delete(id: Long)
GET     /content/:id/access/:authKey    controllers.ContentController.shareAccess(id: Long, authKey: String)
POST    /content/:id/addToCourse        controllers.CourseContent.addToCourse(id: Long)
POST    /content/:id/visibility         controllers.ContentEditing.setVisibility(id: Long)
POST    /content/:id/shareability       controllers.ContentEditing.setShareability(id: Long)
POST    /content/:id/settings           controllers.ContentEditing.setSettings(id: Long)
POST    /content/:id/settings/personal  controllers.ContentEditing.setPersonalSettings(id: Long)
POST    /content/:id/metadata           controllers.ContentEditing.setMetadata(id: Long)
POST    /content/:id/thumbnail          controllers.ContentEditing.changeThumbnail(id: Long)
GET     /content/:id/edit               controllers.ContentEditing.editImage(id: Long)
POST    /content/:id/edit               controllers.ContentEditing.saveImageEdits(id: Long)
GET     /content/:id/makeThumb/:time    controllers.ContentEditing.createThumbnail(id: Long, time: Double)
#POST    /content/:id/addAnnotations     controllers.DocumentManager.addAnnotations(id: Long)
GET     /content/:id/annotations        controllers.DocumentManager.editAnnotations(id: Long)
POST    /content/:id/annotations        controllers.DocumentManager.saveAnnotations(id: Long)
GET     /content/:id/publish/:docId     controllers.DocumentManager.publishDocument(id: Long, docId: String)
GET     /content/:id/accept/:docId      controllers.DocumentManager.acceptDocument(id: Long, docId: String)

# Playlist pages
GET     /playlist/:id/play              controllers.Playlists.view(id: Long)
GET     /playlist/:id                   controllers.Playlists.about(id: Long)

# Question set pages
GET     /questions/:id                  controllers.QuestionSets.about(id: Long)
GET     /questions/:id/take             controllers.QuestionSets.take(id: Long)
GET     /questions/:id/getIndex         controllers.QuestionSets.getIndex(id: Long)
GET     /questions/:id/grade/:index     controllers.QuestionSets.grade(id: Long, index: Int)

# User pages
GET     /user/settings                  controllers.Users.accountSettings
POST    /user/settings                  controllers.Users.saveSettings
POST    /user/changePassword            controllers.Users.changePassword
POST    /user/uploadPicture             controllers.Users.uploadProfilePicture
GET     /user/notifications             controllers.Users.notifications
GET     /user/notifications/mark/:id    controllers.Users.markNotification(id: Long)
GET     /user/teacher/request           controllers.Users.teacherRequestPage
POST    /user/teacher/request           controllers.Users.submitTeacherRequest

# Admin pages
GET     /admin                              controllers.Administration.admin
GET     /admin/teacher                      controllers.Administration.teacherApprovalPage
GET     /admin/teacher/:id/approve          controllers.Administration.approveTeacher(id: Long)
GET     /admin/teacher/:id/deny             controllers.Administration.denyTeacher(id: Long)
GET     /admin/users                        controllers.Administration.manageUsers
POST    /admin/users/setRole                controllers.Administration.setRole
POST    /admin/users/notify                 controllers.Administration.sendNotification
GET     /admin/users/:id/delete             controllers.Administration.delete(id: Long)
GET     /admin/logins                       controllers.Administration.logins
GET     /admin/courses                      controllers.Administration.manageCourses
POST    /admin/courses/:id                  controllers.Administration.editCourse(id: Long)
GET     /admin/courses/:id/delete           controllers.Administration.deleteCourse(id: Long)
GET     /admin/content                      controllers.Administration.manageContent
POST    /admin/content                      controllers.Administration.batchUpdateContent
GET     /admin/homePageContent              controllers.Administration.homePageContent
POST    /admin/homePageContent              controllers.Administration.createHomePageContent
GET     /admin/homePageContent/:id/active   controllers.Administration.toggleHomePageContent(id: Long)
GET     /admin/homePageContent/:id/delete   controllers.Administration.deleteHomePageContent(id: Long)
GET     /admin/feedback                     controllers.Administration.feedback
GET     /admin/feedback/:id/delete          controllers.Administration.deleteFeedback(id: Long)
GET     /admin/settings                     controllers.Administration.siteSettings
POST    /admin/settings                     controllers.Administration.saveSiteSettings
GET     /admin/proxy/:id                    controllers.Administration.proxy(id: Long)

# CaptionAider pages
GET     /captionaider/:id/:courseId         controllers.CaptionAider.view(id: Long, courseId: Long)
POST    /captionaider/save                  controllers.CaptionAider.save

# Help pages
GET     /help                               controllers.HelpPages.tableOfContents
GET     /help/:id                           controllers.HelpPages.view(id: Long)
GET     /help/:id/edit                      controllers.HelpPages.edit(id: Long)
POST    /help/:id/edit                      controllers.HelpPages.save(id: Long)
GET     /help/:id/delete                    controllers.HelpPages.delete(id: Long)

# Ajax utilities
POST    /ajax/util/serialize                                controllers.ajax.Util.serializeMap
POST    /ajax/util/deserialize                              controllers.ajax.Util.deserializeMap
GET     /ajax/util/annotate/:language/:text                 controllers.ajax.Util.annotate(language: String, text: String)
POST    /ajax/util/detectMime                               controllers.ajax.Util.detectMime
GET     /ajax/translate/google/:src/:dest/:text             controllers.ajax.Translate.translateGoogle(src: String, dest: String, text: String)
GET     /ajax/translate/wordReference/:src/:dest/:text      controllers.ajax.Translate.translateWordReference(src: String, dest: String, text: String)
POST    /ajax/activity                                      controllers.ajax.ActivitySaver.save
POST    /ajax/permissionChecker                             controllers.ajax.PermissionChecker.check
GET     /ajax/content/mine                                  controllers.ajax.ContentLister.mine
GET     /ajax/content/course                                controllers.ajax.ContentLister.course
GET     /ajax/content/public                                controllers.ajax.ContentLister.public
GET     /ajax/content/:id                                   controllers.ajax.ContentLister.get(id: Long)
GET     /ajax/questions/:id/grade/:index                    controllers.QuestionSets.gradeAjax(id: Long, index: Int)

# Feedback
POST    /feedback                       controllers.Application.saveFeedback
POST    /feedback/error                 controllers.Application.saveErrorFeedback

# Map static resources from the /public folder to the /assets URL path
GET     /assets/*file                   controllers.Assets.at(path="/public", file)
