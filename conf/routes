# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# Home/basic pages
GET     /                               controllers.Application.index
GET     /home                           controllers.Application.home
GET     /search                         controllers.Application.search
GET     /about                          controllers.Application.about
GET     /terms                          controllers.Application.terms
GET     /policy                         controllers.Application.policy

# Authentication
GET     /auth/google                                   controllers.authentication.Google.login(action: String = "login", path: String = "")
GET     /auth/google/redirect*path                     controllers.authentication.Google.login(action: String = "login", path: String)
GET     /auth/google/merge                             controllers.authentication.Google.login(action: String = "merge", path: String = "")
GET     /auth/google/callback                          controllers.authentication.Google.callback()
GET     /auth/cas                                      controllers.authentication.Cas.login(action: String = "login", path: String = "")
GET     /auth/cas/redirect*path                        controllers.authentication.Cas.login(action: String = "login", path: String)
GET     /auth/cas/merge                                controllers.authentication.Cas.login(action: String = "merge", path: String = "")
GET     /auth/cas/callback/:action                     controllers.authentication.Cas.callback(action: String, path: String = "")
GET     /auth/cas/callback/:action/redirect*path       controllers.authentication.Cas.callback(action: String, path: String)
POST    /auth/password                                 controllers.authentication.Password.login(action: String = "login", path: String = "")
POST    /auth/password/redirect*path                   controllers.authentication.Password.login(action: String = "login", path: String)
POST    /auth/password/merge                           controllers.authentication.Password.login(action: String = "merge", path: String = "")
POST    /auth/createAccount                            controllers.authentication.Password.createAccount(path: String = "")
POST    /auth/createAccount/redirect*path              controllers.authentication.Password.createAccount(path: String)
GET     /auth/logout                                   controllers.authentication.Authentication.logout

# Course pages
GET     /course                                         controllers.Courses.list
GET     /course/create                                  controllers.Courses.createPage
POST    /course/create                                  controllers.Courses.create
GET     /course/:id                                     controllers.Courses.view(id: Long)
POST    /course/:id                                     controllers.Courses.edit(id: Long)
GET     /course/:id/config                              controllers.Courses.ltiConfiguration(id: Long)
POST    /course/:id/ltiAuth                             controllers.Courses.ltiAuth(id: Long)
GET     /course/:id/keyAuth                             controllers.Courses.keyAuth(id: Long)
POST    /course/:id/addContent                          controllers.Courses.addContent(id: Long)
POST    /course/:id/removeContent                       controllers.Courses.removeContent(id: Long)
POST    /course/:id/announce                            controllers.Courses.addAnnouncement(id: Long)
POST    /course/:courseId/announce/delete               controllers.Courses.deleteAnnouncement(courseId: Long)
GET     /course/:id/request                             controllers.Courses.courseRequestPage(id: Long)
POST    /course/:id/request                             controllers.Courses.submitCourseRequest(id: Long)
GET     /course/:id/request/manage                      controllers.Courses.approvePage(id: Long)
POST    /course/:id/request/approve                     controllers.Courses.approveRequest(id: Long)
POST    /course/:id/request/deny                        controllers.Courses.denyRequest(id: Long)
POST    /course/:id/request/approveMultiple             controllers.Courses.approveRequests(id: Long)
POST    /course/:id/request/denyMultiple                controllers.Courses.denyRequests(id: Long)
GET     /course/:id/join/:key                           controllers.Courses.joinLink(id: Long, key: String)
POST    /course/:id/quit                                controllers.Courses.quitCourse(id: Long)
POST    /course/:id/remove/:studentId                   controllers.Courses.removeStudent(id: Long, studentId: Long)
POST    /course/:id/setPermission/:operation            controllers.Courses.setPermission(id: Long, operation: String)
GET     /course/:courseId/content/:id                   controllers.CourseContent.viewInCourse(id: Long, courseId: Long)
POST    /course/:courseId/content/:id/lti               controllers.CourseContent.ltiAccess(id: Long, courseId: Long)
POST    /course/:courseId/content/:id/remove            controllers.CourseContent.removeFromCourse(id: Long, courseId: Long)

# Content pages
GET     /content/mine                      controllers.ContentController.mine
GET     /content/manage                    controllers.ContentController.manageContent
POST    /content/manage                    controllers.ContentEditing.batchUpdateContent
GET     /content/ltiembed.js               controllers.ContentController.ltiEmbedScript
GET     /content/create/:page              controllers.ContentController.createPage(page: String, courseId: Long = 0)
GET     /content/create/:page/:courseId    controllers.ContentController.createPage(page: String, courseId: Long)
POST    /content/create/url                controllers.ContentController.createFromUrl(courseId: Long, annotations: Boolean)
POST    /content/create/batch              controllers.ContentController.createFromBatch(courseId: Long)
POST    /content/create/file               controllers.ContentController.createFromFile(courseId: Long)
POST    /content/create/resource           controllers.ContentController.createFromResource(courseId: Long)
POST    /content/create/playlist           controllers.ContentController.createPlaylist(courseId: Long)
POST    /content/create/questions          controllers.ContentController.createQuestionSet(courseId: Long)
GET     /content/:id                       controllers.ContentController.view(id: Long)
GET     /content/:id/json                  controllers.ContentController.getAsJson(id: Long)
POST    /content/:id/delete                controllers.ContentController.delete(id: Long)
POST    /content/:id/clone                 controllers.ContentController.cloneContent(id: Long)
GET     /content/:id/access/:authKey       controllers.ContentController.shareAccess(id: Long, authKey: String)
POST    /content/:id/lti                   controllers.ContentController.ltiAccess(id: Long)
POST    /content/:id/addToCourse           controllers.CourseContent.addToCourse(id: Long)
POST    /content/:id/settings              controllers.ContentEditing.setSettings(id: Long)
POST    /content/:id/metadata              controllers.ContentEditing.setMetadata(id: Long)
POST    /content/:id/thumbnail             controllers.ContentEditing.changeThumbnail(id: Long)
GET     /content/:id/edit                  controllers.ContentEditing.editImage(id: Long)
POST    /content/:id/edit                  controllers.ContentEditing.saveImageEdits(id: Long)
POST    /content/:id/makeThumb/:time       controllers.ContentEditing.createThumbnail(id: Long, time: Double)
POST    /content/:id/source                controllers.ContentEditing.setMediaSource(id: Long)

# Playlist pages
GET     /playlist/:id/play              controllers.Playlists.view(id: Long)
GET     /playlist/:id                   controllers.Playlists.about(id: Long)

# Question set pages
GET     /questions/:id                  controllers.QuestionSets.about(id: Long)
GET     /questions/:id/take             controllers.QuestionSets.take(id: Long)
GET     /questions/:id/getIndex         controllers.QuestionSets.getIndex(id: Long)
GET     /questions/:id/grade/:index     controllers.QuestionSets.grade(id: Long, index: Int)

# User pages
GET     /user/settings                  controllers.Users.accountSettings
POST    /user/settings                  controllers.Users.saveSettings
POST    /user/changePassword            controllers.Users.changePassword
POST    /user/uploadPicture             controllers.Users.uploadProfilePicture
GET     /user/notifications             controllers.Users.notifications
POST    /user/notifications/mark/       controllers.Users.markNotification()
POST    /user/notifications/delete/     controllers.Users.deleteNotification()
GET     /user/permission/request        controllers.Users.permissionRequestPage
POST    /user/permission/request        controllers.Users.submitPermissionRequest

# Admin pages
GET     /admin                                  controllers.Administration.admin
GET     /admin/permission                       controllers.Administration.approvalPage
POST    /admin/permission/approve               controllers.Administration.approveRequest()
POST    /admin/permission/deny                  controllers.Administration.denyRequest()
GET     /admin/users                            controllers.Administration.manageUsers
GET     /admin/users/:id/:limit                 controllers.Administration.pagedUsers(id: Long, limit: Long)
POST    /admin/users/setPermission/:operation   controllers.Administration.setPermission(operation: String)
POST    /admin/users/notify                     controllers.Administration.sendNotification(currentPage: Int)
POST    /admin/users/:id/delete                 controllers.Administration.delete(id: Long)
GET     /admin/courses                          controllers.Administration.manageCourses
POST    /admin/courses/:id                      controllers.Administration.editCourse(id: Long)
POST    /admin/courses/:id/delete               controllers.Administration.deleteCourse(id: Long)
GET     /admin/content                          controllers.Administration.manageContent
POST    /admin/content                          controllers.Administration.batchUpdateContent
GET     /admin/homePageContent                  controllers.Administration.homePageContent
POST    /admin/homePageContent                  controllers.Administration.createHomePageContent
POST    /admin/homePageContent/:id/active       controllers.Administration.toggleHomePageContent(id: Long)
POST    /admin/homePageContent/:id/delete       controllers.Administration.deleteHomePageContent(id: Long)
GET     /admin/settings                         controllers.Administration.siteSettings
POST    /admin/settings                         controllers.Administration.saveSiteSettings
GET     /admin/proxy/:id                        controllers.Administration.proxy(id: Long)

# CaptionAider pages
GET     /captionaider/:id/:courseId         controllers.CaptionAider.view(id: Long, courseId: Long)
POST    /captionaider/save                  controllers.CaptionAider.save

# Annotation Editor pages
GET     /annotations/:id/                   controllers.DocumentManager.editAnnotations(id: Long)
POST    /annotations/save                   controllers.DocumentManager.saveAnnotations
POST    /annotations/saveEditedAnnotations  controllers.DocumentManager.saveEditedAnnotations
POST    /content/:contentId/delete/:docId   controllers.DocumentManager.deleteDocument(contentId: Long, docId: String)

# Word List pages
GET     /words                              controllers.WordLists.view
GET     /wordList                           controllers.WordLists.viewJSON
POST    /words                              controllers.WordLists.add
POST    /words/delete/:id                   controllers.WordLists.deleteWord(id: Long)
POST    /words/export                       controllers.WordLists.export
GET     /words/auth                         controllers.WordLists.authorize
GET     /words/auth/callback                controllers.WordLists.authorizeCallback

# Help pages
GET     /help                               controllers.HelpPages.tableOfContents
GET     /help/:id                           controllers.HelpPages.view(id: Long)
GET     /help/:id/edit                      controllers.HelpPages.edit(id: Long)
POST    /help/:id/edit                      controllers.HelpPages.save(id: Long)
POST    /help/:id/delete                    controllers.HelpPages.delete(id: Long)

# Ajax utilities
POST    /scola                              controllers.Scola.buildUrl
POST    /ajax/permissionChecker             controllers.ajax.PermissionChecker.check
GET     /ajax/content/mine                  controllers.ajax.ContentLister.mine
GET     /ajax/content/course                controllers.ajax.ContentLister.course
GET     /ajax/content/:id                   controllers.ajax.ContentLister.get(id: Long)
GET     /ajax/questions/:id/grade/:index    controllers.QuestionSets.gradeAjax(id: Long, index: Int)

# Feedback
POST    /feedback                       controllers.Application.saveFeedback
POST    /feedback/error                 controllers.Application.saveErrorFeedback

# Map static resources from the /public folder to the /assets URL path
GET     /assets/*file                   controllers.Assets.at(path="/public", file)
